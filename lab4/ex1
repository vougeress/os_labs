#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>

void print_process_info(const char *process_name) {
    pid_t pid = getpid();
    pid_t ppid = getppid();
    clock_t start_time = clock();
    usleep(rand() % 1000000);
    clock_t end_time = clock();
    double execution_time = ((double)(end_time - start_time) / CLOCKS_PER_SEC) * 1000;
    printf("%s: PID = %d, PPID = %d, Execution Time = %.2f ms\n", process_name, pid, ppid, execution_time);
}

int main() {
    srand(time(NULL));
    pid_t pid1 = fork();
    if (pid1 < 0) {
        perror("failed");
        exit(1);
    }
    if (pid1 == 0) {
        print_process_info("Child Process 1");
        exit(0);
    } else {
        pid_t pid2 = fork();
        if (pid2 < 0) {
            perror("Fork failed");
            exit(1);
        }
        if (pid2 == 0) {
            print_process_info("Child Process 2");
            exit(0);
        }
    }
    print_process_info("Main Process");
    wait(NULL);
    wait(NULL);
    return 0;
}
